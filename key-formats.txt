Leo Moran
10/02/2024

Questions 
1. Create an RSA public/private key pair that you will use throughout the rest of this 
   assignment.

ssh-keygen -t rsa -m pem

   When you are asked to pick a file name, use "id_rsa_homework" so you can remember 
   to delete these files when you're done with the assignment. (You're going to be 
   posting your observations in a public GitHub repo, so you're not going to ever 
   actually use this key pair for anything.)
   Copy the contents of id_rsa_homework and id_rsa_homework.pub into your 
   key-formats.txt file.

2. Put a heading in your report: "Private Key"

3. For your private key file (id_rsa_homework), list the items you expect to be 
   contained in the file. (Hint: the Appendix of RFC 8017 should help.)

4. Use one or more of the following tools (findable by searching the internet for 
   "web asn.1 decoder") to decode your private key file.

   * Lapo Luchini's ASN.1 decoder
   * OSS Nokalva's ASN.1 Playground
   * Michael Holtstrom's ASN.1 decoder
   
   Explain briefly the steps you took to decode the private key file.
5. For each integer in your decoded private key file, tell me:

   * What is the meaning/name of the integer? This should correspond to one of the 
   items in your answer to the previous question, articulated as an ASN.1 name from 
   the specification in RFC 8017.
   * What is the value of the integer? Write the integer in either decimal or 
   hexadecimal, whichever is more convenient. If hexadecimal, prepend the integer 
   with "0x".

6. Next, we're moving on to the public key file id_rsa_homework.pub, so put a heading 
   in your report: "Public Key"

7.Do the same things you did for the private key: write down what you expect to find 
   in id_rsa_homework.pub and why; explain how you decoded the file; for each integer in 
   the file, provide its name, value, and any other relevant details. Unlike with the 
   private key, I'm not telling you exactly where to look in the specifications to figure 
   out this key's file format. (Though you might find this blog post by Leonardo Giordano 
   handy. Aren't I nice?) 

8. Put one last heading in your report: "Sanity check"

9. Demonstrate that the integers you found in these two files work as you expect from 
   an RSA key pair. For example, does e*d mod lambda(n) = 1? There are various 
   relationships that you would expect these numbers to have, so show me that they do in 
   fact have those relationships.


Answers

Private Key 

1. Here are the contents of id_rsa_homework file:
-----BEGIN RSA PRIVATE KEY-----
MIIG5AIBAAKCAYEAp6/0KIGmtITkd8gYsXxOTXe3CfvH+AreUxHHvimvuFRYBJkp
OrGrAQvfWLqDLwkT0n/+tumsYRd0hcH4obLHttkVxs/ub11S6/9MVcKSlTxNcvu0
3cqCbwvMaCIxk/WvkqCqfqUCIGc0bOoTtkH9sYbZnqHoinggzPqqz1FEKvlYrx5E
GvMlv8DULKtpvbClYdGFIKk3Ln70vxIzUgzWXOrJlM0V+1adLaWwJhWVrcO/nloF
0YdXQ+a3DZFwoszMMed2bGptNHpnOTAyzbIxOcdeew8MbciEouWcWZ5b4N+WVo2J
7hkhfooapAE3qAkF8sqPwb8SLwy3ud1WvP5pZ8OCHSq0IRg2zJdoWGaGycUx+t3g
kzB6L+FXLnWNfi26c+Ksje7Q1TaZsSai0dvI9Uq/Mrenmz7ornnKgqnkK97QHeBI
aTzbzqNMSAHb8FQAS8D4yxPhcnLsdKjbXsy5y9eq7Juj5krq8BGTUZW2iVNLWG0j
Vzgw3AZFYA+xzZDrAgMBAAECggGAGMiCl3ICB3AUrDdgnuq2T/C/lrQlq90/Wpuo
H8zdcarVj2hrlYcotPDiQ6TdOphm25ebN8F1fqwOxq4SZyObLMUM2ONmZAMw/Dwx
NgOZ0oClGbdl1dnWST8/KKzVEv8ewdcJG8qbc9qM/wPhgfBi5Ff/1dgsHDsA7gqm
MBncr1VG7CrW+fyxuZNwSGHVMPnol3p16IvZ4f9VgN/Zweivze/NdzaQZyM3+8Uf
MaHDC3mA2pCHh54vIZP5vgGe2hDWZ7fjlhUMIASKsg2Elc+n9+JvmYunrzCy/yJ/
P32aK2Y9eyDHmzGU50atltlP9vC7m6HDWgnJKaxU9+H8MovJTRNl3aAxwzK0ox8S
JyKACfTmtqaNckd/e1qhATleYSI3isk1GIC7xnxmXgHaqN6LZIIMMSOocqZm/oU7
A6PQtlHzQxY2ihKOOM+1rsj1ATKfkoPeU1W8Kc1fps2flovDTO5vlZjssTFLwKIB
pIOi7QGH/IjGryyy+oIHvLplD0EBAoHBANvNCyCE/vo93p8fZkCa60SasYkqFHte
hVCSx0ClnD+OFoZEp/poSPOT1Vk4SBNZk6qK6/Cx1Yd98rlkjJhUcfaz5acDeFea
dEMmyvrb17lYASoVYVjptsFEbJzzX6LJDa6Ujj1xDyoCmojPOTxkeyKN45Yx4LKS
FNxPkxf9pzxF/9CjNlUN7l96NUnyb6JKVEDu3opwSSc9Z+P5+7TzkQ1/km8abMb8
3hDIKs717A3Oxr+T2NEywrZgYCBSB7rRqwKBwQDDTcOtxpubHGBBC0jlJiH46rhc
9IeY9xNBDUJA27zNVvkyR6W+zLNOjecOPJJUVibXdmBs9UJ7wBIeXYMIYmYAZfWO
XIhKkAA6lK8seHgT8Xsl9bCGGvLuNq0LIQiGU3pDWyADeqFkXclIXl9PV5TJPN2k
Pnrja2V6aWVvP+tDktoAIUa4Oy7kMaPZyBFhw6pSFysHtRrRHXsmxW856IugOJPd
OGtzTKakq+5+/vQQ8LIbjQj6il5c6afAxKW/fcECgcAzXFxnQuyZ6O8mW533Jrwn
Eca+eHjEwzd/tmyc7JXwO/GDenOODeROFpNZ/87Hxry8sy2i1stAl+up6pb32XOv
5CWbuzHZtpvIPT5dFBX6l1feT5SpxCMSUjzXB/+m+DgcPVZngQ28EVOu+E01kX08
e89cf1c0IvKA8I88oeb8LJc0V48QnOrAoLvnBaGUWK4LZkXWL5rIco7eNMHebLPO
ZasADzqv3NK/NSbbqZd5OoIyrgeSCrx5BVgw9TodK3UCgcEAhWxG1hzsiRblmwn+
jq1yX/7aXIahbBq/CJ3qOSzk2tMkAvl3fdWSWYQP6WXwAbWpa2DvlwAmnywkNKJl
tgCi9nqxOsR0R5wAzARvd84FGnrKSrCCG9ulQqAPr56tmDbHO+SxBi9suohnzgzK
yAVpG+F8+YvFoD/qX6pJJathKhTU4WnaSloEOti+uzU2yrdFUDeLqgRLgbjGPUJ8
Le90E80TFvpITch7v9vFXvUF/9yvkKrVC3Qj6w2lEMhHA38BAoHBAKOPcjocb1tc
AEABDeMG+Lu2W3oRZU9sJNtycm3UK8Ts9oHgITFxQC6fvwhtjxa7cKKJzj8F1LGS
wDXp6DmrA+Fkft2OJkYnPJiRSkhBX3JUqRdtVktjIvKb/xMSwfEiFQ0KZV/Y7Nb1
xsP6M1GSuwkAuTOv3Pn8HID/I+gDhzKj8xvSRek92qiZc16gPbI8o/nAXJ1RPVqK
MzRoRIZhAv4WA0w/ceLVQ+xpLp8rTbNWMq+tZPoQZSzOmi90RdZ6Zw==
-----END RSA PRIVATE KEY-----

   And here are the contents of id_rsa_homework.pub file:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCnr/Qogaa0hOR3yBixfE5Nd7cJ+8f4Ct5TEce+Ka+4VFgEmSk6sasBC99YuoMvCRPSf/626axhF3SFwfihsse22RXGz+5vXVLr/0xVwpKVPE1y+7TdyoJvC8xoIjGT9a+SoKp+pQIgZzRs6hO2Qf2xhtmeoeiKeCDM+qrPUUQq+VivHkQa8yW/wNQsq2m9sKVh0YUgqTcufvS/EjNSDNZc6smUzRX7Vp0tpbAmFZWtw7+eWgXRh1dD5rcNkXCizMwx53Zsam00emc5MDLNsjE5x157DwxtyISi5ZxZnlvg35ZWjYnuGSF+ihqkATeoCQXyyo/BvxIvDLe53Va8/mlnw4IdKrQhGDbMl2hYZobJxTH63eCTMHov4VcudY1+Lbpz4qyN7tDVNpmxJqLR28j1Sr8yt6ebPuiuecqCqeQr3tAd4EhpPNvOo0xIAdvwVABLwPjLE+Fycux0qNtezLnL16rsm6PmSurwEZNRlbaJU0tYbSNXODDcBkVgD7HNkOs= leo17@Tranquility


2. Completed this step, the heading should be above the first answer.

3. The private key should contain the version,  modulus (n), public exponent (e), 
   private, exponent (d), two prime numbers (p & q) that can make up the modulus 
   (p * q = n), two exponents making use of the prime numbers 
   (d mod (p-1) & d mod (q-1)), and finaly a coefficent ((inverse of q) mod p).

4. I made use of Lapo Luchini's ASN.1 decoder and entered the file to decode the 
   private key. Here is the link:
https://lapo.it/asn1js/

5. The decoder had the Version number which determined if there were two-primes 
   used or multiple, it was set as 0 so there were only two primes found. Then 
   there was modulus which is the RSA modulus n, which you can get by multiplying
   two prime numbers together, this integer was 
   (3072 bit)
   38054580297051723280759508857937096425249433084342267367904913739673188830986953302736
   81575332642807543468132598663054582110378490388813535256015287806846709701525531648981
   53824086550705864330084046273238260965302904103195947795953700965508929251102653531625
   88672917195918933808029719236566589349558904221665569613580253841828272990214352248041
   21910791871846833494999009901517361194697170958200388254649171803262341380579835617492
   42199843412221348932565821221050708854204625473607893105443460888762415154663532773422
   64829108525823654725100405175957222309460717056085890816249585981636582632930686070664
   58499787480790608767978706710627702777856444855286352419087644009099501044383817268918
   58866174669171613501109430119418877099315422413459182724585754224693889530368235040584
   72131223127248862342856507692883854595128446941988269200730904342339525865170902002102
   35025244781381994910886693624351589707365382376700157739391619307 
   Next would be the public exponent, which is the RSA's e integer, which is 
   65537
   and it's used as a part of a public key to encrypt messages between the user and 
   the one who released the key. The private exponent follows being 
   (3069 bit)
   56242529373825929123615149121561669892574577544736439221436287056544319547269424857761
   08112771713418964254136190342912657326567596610471627094582308878514004328696202077000
   04263256226274776370782012024136868594827948966775401735143132513224512676225689626825
   81425130225623814465809521419256905937077917251484307685298127578611876067445292868841
   60829444446756554195730718511084907843178173840903453108096476507377365245936842972829
   33296867920529774899802026999571750363149842224336917780442303225037205289519748402584
   70143688392185610094883741060188799319228556353071978981868906187695248781807642496585
   44136543398703746490471326874823638826553697616013114874659695246340380164572113707402
   93939530617688198891342217518075127338954663111498022893025110641378346329739275807920
   32709307299776294776768342715972455199093284654744844019149378103575052537551444002100
   5400503715751151282282900770035757302090224588791735652535189761
   the private exponent acts as the RSA's d which is not shared and is used to 
   decypher messages sent to the owner by a sender who used the public key. After 
   the private exponents are the two prime numbers of RSA's p and q, these are 
   used to calculate n, p is 
   (1536 bit)
   20694881395652621674843251239010754528994946375945788818573389829382278352058277703997
   15581226480792683986389325249046374034686928797168683354726034230288073882071698080229
   27868607995346013998467561768233205982563112245288997571416817021203769624879372770793
   78305144557669722039397159723222069974443975207605581367923235488226684242647167959515
   21539115592262048896584858609519094910609433953789591213056266640501658432209697512697
   945066832127666952411642718769579
   while q is
   (1536 bit)
   18388402218649997870836716143185431991972244883638532391560210683240175373781382707747
   87012114509457513413051029068931489206975689764452735034322208291584019154480007294497
   98203338448560678531561110807392812981071322458329240491827687008989612503714107426241
   34822489780610919515953204915925255895323213873880488590397644127712669213310032727621
   30494439192762092101672729458415888579228628140555192981195406798821364603085991799674
   145744488752451267054432394640833 
   Next are the two exponents, 
   the first being 
   (1534 bit)
   48357632130403321532653241600044355838233152082218259909308160557724676241423999383403
   64131849539475283056527782300669266516196290278749594411443076155855709512190973709603
   91439929023411028636118870396680244200523597498261395670945746046159349380564065277924
   83538304126852636420850527793677278421141498135293326375692574922059820024093066532190
   36704459493095658452828253466923328724395817869040969198581513852120542171728841373492
   27623380185286047717043755363189
   while the second is 
  (1536 bit)
   12562148772958751616233600182533502619048497000629634744265586656545602206920366611094
   30765924452102351199003931725196463597276585472848587102807176245949611754953368121660
   49180766117139306028885271725416040142034655982182839545601861586073255275894350026514
   45203053427186354098726778621172857423217585967642358288741982740832684224458195908892
   09248165639842293476602399305921787135041642722567970766957302793793279155429238824709
   871572886314978533173032747499265
   they make up for RSA's d mod (p - 1) and d mod (q - 1) respectively. Finally we got the 
   coefficient which is RSA's (inverse of q) mod p, the integer was 
   (1536 bit)
   15399668442855581748071160211797061879727237309872247892004088664791716871256533125291
   44945367331521191290265241640649352361416670692841511209181970461385322945329195797515
   50851595747688397674729019139267242520135398204240877713928233197150408140593394088154
   14467402662531167903489688322573111588617444046123092715840612766211960373930122912062
   50157311516248204656214855998877571251913210459474583290348221239284354758305522890434
   104634206721790173027918335605351

Public Key

6. Placed header on the line above

7. Within the public key, I only expect to see the modulus (n) and the public 
   exponent (e). I made use of the provided decoder given by professor (after running 
   the given command)
ssh-keygen -f id_rsa.pub -e -m pem > id_rsa.pub.pem
   , which gave me this,
-----BEGIN RSA PUBLIC KEY-----
MIIBigKCAYEAp6/0KIGmtITkd8gYsXxOTXe3CfvH+AreUxHHvimvuFRYBJkpOrGr
AQvfWLqDLwkT0n/+tumsYRd0hcH4obLHttkVxs/ub11S6/9MVcKSlTxNcvu03cqC
bwvMaCIxk/WvkqCqfqUCIGc0bOoTtkH9sYbZnqHoinggzPqqz1FEKvlYrx5EGvMl
v8DULKtpvbClYdGFIKk3Ln70vxIzUgzWXOrJlM0V+1adLaWwJhWVrcO/nloF0YdX
Q+a3DZFwoszMMed2bGptNHpnOTAyzbIxOcdeew8MbciEouWcWZ5b4N+WVo2J7hkh
fooapAE3qAkF8sqPwb8SLwy3ud1WvP5pZ8OCHSq0IRg2zJdoWGaGycUx+t3gkzB6
L+FXLnWNfi26c+Ksje7Q1TaZsSai0dvI9Uq/Mrenmz7ornnKgqnkK97QHeBIaTzb
zqNMSAHb8FQAS8D4yxPhcnLsdKjbXsy5y9eq7Juj5krq8BGTUZW2iVNLWG0jVzgw
3AZFYA+xzZDrAgMBAAE=
-----END RSA PUBLIC KEY-----
   and I got two hexadecimal values.
U.P.SEQUENCE {
   U.P.INTEGER 0x00a7aff42881a6b484e477c818b17c4e4d77b709fbc7f80ade5311c7be29afb854580499
   293ab1ab010bdf58ba832f0913d27ffeb6e9ac61177485c1f8a1b2c7b6d915c6cfee6f5d52ebff4c55c292
   953c4d72fbb4ddca826f0bcc68223193f5af92a0aa7ea5022067346cea13b641fdb186d99ea1e88a7820cc
   faaacf51442af958af1e441af325bfc0d42cab69bdb0a561d18520a9372e7ef4bf1233520cd65ceac994cd
   15fb569d2da5b0261595adc3bf9e5a05d1875743e6b70d9170a2cccc31e7766c6a6d347a67393032cdb231
   39c75e7b0f0c6dc884a2e59c599e5be0df96568d89ee19217e8a1aa40137a80905f2ca8fc1bf122f0cb7b9
   dd56bcfe6967c3821d2ab4211836cc9768586686c9c531fadde093307a2fe1572e758d7e2dba73e2ac8dee
   d0d53699b126a2d1dbc8f54abf32b7a79b3ee8ae79ca82a9e42bded01de048693cdbcea34c4801dbf05400
   4bc0f8cb13e17272ec74a8db5eccb9cbd7aaec9ba3e64aeaf011935195b689534b586d23573830dc064560
   0fb1cd90eb
   U.P.INTEGER 0x010001 (65537 decimal)
}
  The first translates to 

  which is the same value as n, and the second translates to 
>>> int(0x010001) 
65537
   which is the same value as e.


Sanity Check
8. Placed header on line above

9. Now to check if all the integers do infact work through the use of python3 within 
   my terminal.

n = 3805458029705172328075950885793709642524943308434226736790491373967318883098695330273681575332642807543468132598663054582110378490388813535256015287806846709701525531648981538240865507058643300840462732382609653029041031959477959537009655089292511026535316258867291719591893380802971923656658934955890422166556961358025384182827299021435224804121910791871846833494999009901517361194697170958200388254649171803262341380579835617492421998434122213489325658212210507088542046254736078931054434608887624151546635327734226482910852582365472510040517595722230946071705608589081624958598163658263293068607066458499787480790608767978706710627702777856444855286352419087644009099501044383817268918588661746691716135011094301194188770993154224134591827245857542246938895303682350405847213122312724886234285650769288385459512844694198826920073090434233952586517090200210235025244781381994910886693624351589707365382376700157739391619307
e = 65537
d = 562425293738259291236151491215616698925745775447364392214362870565443195472694248577610811277171341896425413619034291265732656759661047162709458230887851400432869620207700004263256226274776370782012024136868594827948966775401735143132513224512676225689626825814251302256238144658095214192569059370779172514843076852981275786118760674452928688416082944444675655419573071851108490784317817384090345310809647650737736524593684297282933296867920529774899802026999571750363149842224336917780442303225037205289519748402584701436883921856100948837410601887993192285563530719789818689061876952487818076424965854413654339870374649047132687482363882655369761601311487465969524634038016457211370740293939530617688198891342217518075127338954663111498022893025110641378346329739275807920327093072997762947767683427159724551990932846547448440191493781035750525375514440021005400503715751151282282900770035757302090224588791735652535189761
p = 2069488139565262167484325123901075452899494637594578881857338982938227835205827770399715581226480792683986389325249046374034686928797168683354726034230288073882071698080229278686079953460139984675617682332059825631122452889975714168170212037696248793727707937830514455766972203939715972322206997444397520760558136792323548822668424264716795951521539115592262048896584858609519094910609433953789591213056266640501658432209697512697945066832127666952411642718769579
q = 1838840221864999787083671614318543199197224488363853239156021068324017537378138270774787012114509457513413051029068931489206975689764452735034322208291584019154480007294497982033384485606785315611108073928129810713224583292404918276870089896125037141074262413482248978061091951595320491592525589532321387388048859039764412771266921331003272762130494439192762092101672729458415888579228628140555192981195406798821364603085991799674145744488752451267054432394640833
expo1 = 483576321304033215326532416000443558382331520822182599093081605577246762414239993834036413184953947528305652778230066926651619629027874959441144307615585570951219097370960391439929023411028636118870396680244200523597498261395670945746046159349380564065277924835383041268526364208505277936772784211414981352933263756925749220598200240930665321903670445949309565845282825346692332872439581786904096919858151385212054217172884137349227623380185286047717043755363189
expo2 = 1256214877295875161623360018253350261904849700062963474426558665654560220692036661109430765924452102351199003931725196463597276585472848587102807176245949611754953368121660491807661171393060288852717254160401420346559821828395456018615860732552758943500265144520305342718635409872677862117285742321758596764235828874198274083268422445819590889209248165639842293476602399305921787135041642722567970766957302793793279155429238824709871572886314978533173032747499265
coe = 1539966844285558174807116021179706187972723730987224789200408866479171687125653312529144945367331521191290265241640649352361416670692841511209181970461385322945329195797515508515957476883976747290191392672425201353982042408777139282331971504081405933940881541446740266253116790348968832257311158861744404612309271584061276621196037393012291206250157311516248204656214855998877571251913210459474583290348221239284354758305522890434104634206721790173027918335605351


>>> (p * q) == n
True
>>> expo1 == d % (p - 1)
True
>>> expo2 == d % (q - 1)
True

>>> math.lcm(p - 1, q - 1)

>>> lambdaN = math.lcm(p - 1, q - 1)   
>>> (e * d) % lambdaN
1

>>> math.gcd(e, lambdaN) 
1

   After these checks I can confirm that the values do infact share the same relationships that
   I would expect them to have.